#include<iostream>#include<windows.h> #include<conio.h>#include<stdio.h>#include<string>#include<vector>#include<cstring>#include<time.h>#include<random>#include<thread>using namespace std;struct POINT{	int x;	int y;};// khoi tao con ran voi do dai ban dau la 4 diem co toa do duoi day vector<POINT> snake = {	POINT{ 20 / 2 + 2, 70 / 2 },	POINT{ 20 / 2 + 1, 70 / 2 },	POINT{ 20 / 2, 70 / 2 },	POINT{ 20 / 2 - 1, 70 / 2 },};#define MAX_SIZE_SNAKE 10#define MAX_SIZE_FOOD 4#define MAX_SPEED 3POINT snake[10]; //snakePOINT food[4]; // foodint CHAR_LOCK;//used to determine the direction my snake cannot move (At a moment, there is  one direction my snake cannot move to)int MOVING;//used to determine the direction my snake moves (At a moment, there are three directions my snake can move)int SPEED;// Standing for level, the higher the level, the quicker the speedint HEIGH_CONSOLE, WIDTH_CONSOLE;// Width and height of console-screenint FOOD_INDEX; // current food-indexint SIZE_SNAKE; // size of snake, initially maybe 6 units and maximum size maybe 10)int STATE; // State of snake: dead or alivevoid ResetData() {	//Initialize the global values	CHAR_LOCK = 'A', MOVING = 'D', SPEED = 1; FOOD_INDEX = 0, WIDTH_CONSOLE = 70,		HEIGH_CONSOLE = 20, SIZE_SNAKE = 6;	// Initialize default values for snake	snake[0] = { 10, 5 }; snake[1] = { 11, 5 };	GenerateFood();//Create food array}// vo hieu hoa viec nguoi dung thay doi kich thuoc cua so Consolevoid FixConsoleWindow() {	HWND consoleWindow = GetConsoleWindow();	LONG style = GetWindowLong(consoleWindow, GWL_STYLE);	style = style & ~(WS_MAXIMIZEBOX) & ~(WS_THICKFRAME);	SetWindowLong(consoleWindow, GWL_STYLE, style);}// ham chuyen con tro chuot toi toa do (x,y)void GotoXY(int x, int y) {	COORD coord;	coord.X = x;	coord.Y = y;	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);}//ham kiem tra con ran co dam vao tuong hay kobool isTouchWall(){	return snake[0].x == 0 || snake[0].y == 0 || snake[0].x == WIDTH_CONSOLE || snake[0].y == HEIGH_CONSOLE;}// ham kiem ta con ran co tu can vao minhbool tu_can(){	POINT head = snake[0];	for (int i = 1; i < SIZE_SNAKE; i++)		if (head.x == snake[i].x && head.y == snake[i].y)			return true;	return false;}bool IsValid(int x, int y) {	for (int i = 0; i < SIZE_SNAKE; i++) {		if (snake[i].x == x && snake[i].y == y) {			return false;		}	}	return true;}void GenerateFood() {	int x, y;	srand(time(NULL));	for (int i = 0; i < MAX_SIZE_FOOD; i++) {		do {			x = rand() % (WIDTH_CONSOLE - 1) + 1;			y = rand() % (HEIGH_CONSOLE - 1) + 1;		} while (!IsValid(x, y));		food[i] = { x,y };	}}void StartGame() {	system("cls"); // clear screen	ResetData(); // Intialize original data	DrawBoard(0, 0, WIDTH_CONSOLE, HEIGH_CONSOLE); // Draw game	STATE = 1;//Start running Thread    }// ham ve tuong bao quanhvoid DrawBoard(int x, int y, int width, int height, int curPosX = 0, int curPosY = 0){   // Ve tuong o tren va duoi	for (int i = 0; i <= width; i++)	{		GotoXY(x + i, y);		cout << 'X';		GotoXY(x + i, y + height);		cout << 'X';	}	// ve 2 tuong doc	for (int i = 1; i <= height; i++)	{		GotoXY(x, y + i);		cout << 'X';		GotoXY(x + width, y + i);		cout << 'X';	}	GotoXY(curPosX, curPosY);}// ham exit gamevoid ExitGame(HANDLE t) {	system("cls");	int temp = TerminateThread(t, 0);	GotoXY(53, 6);	cout << "THANKS FOR PLAYING";}//ham pause gamevoid PauseGame(HANDLE t) {	SuspendThread(t);}// ham an thuc an void Eat() {	snake[SIZE_SNAKE] = food[FOOD_INDEX];	if (FOOD_INDEX == MAX_SIZE_FOOD - 1)	{		FOOD_INDEX = 0;		SIZE_SNAKE = 6;		if (SPEED == MAX_SPEED)			SPEED = 1;		else SPEED++;		GenerateFood();	}	else {		FOOD_INDEX++;		SIZE_SNAKE++;	}}// ham thong bao khi con ran tu can ban than hoac dam vao tuongvoid ProcessDead(){	STATE = 0;	GotoXY(0, HEIGH_CONSOLE + 2);	printf("Dead, type y to continue or anykey to exit");}// ham ve con ran va thuc anvoid DrawSnakeAndFood(char* str){	GotoXY(food[FOOD_INDEX].x, food[FOOD_INDEX].y);	printf(str);	for (int i = 0; i < SIZE_SNAKE; i++) {		GotoXY(snake[i].x, snake[i].y);		printf(str);	}}// ham re phaivoid MoveRight(){	if (isTouchWall(snake[SIZE_SNAKE - 1].x + 1, snake[SIZE_SNAKE - 1].y))	{		ProcessDead();	}  // neu sang phai la cham tuong	if (snake[SIZE_SNAKE - 1].x + 1 == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y == food[FOOD_INDEX].y)	{  // neu ben phai la food		Eat();	}	for (int i = 0; i < SIZE_SNAKE - 1; i++)	{		snake[i].x = snake[i + 1].x;		snake[i].y = snake[i + 1].y;	}	snake[SIZE_SNAKE - 1].x++;}// ham re traivoid MoveLeft(){	if (isTouchWall(snake[SIZE_SNAKE - 1].x - 1, snake[SIZE_SNAKE - 1].y))		ProcessDead();  // neu ben trai la tuong	if (snake[SIZE_SNAKE - 1].x - 1 == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y == food[FOOD_INDEX].y)	{   // neu ben trai la food		Eat();	}	for (int i = 0; i < SIZE_SNAKE - 1; i++)	{		snake[i].x = snake[i + 1].x;		snake[i].y = snake[i + 1].y;	}	snake[SIZE_SNAKE - 1].x--;}// di chuyen xuong duoivoid MoveDown(){	if (isTouchWall(snake[SIZE_SNAKE - 1].x, snake[SIZE_SNAKE - 1].y + 1))		ProcessDead(); // neu xuong duoi la tuong	if (snake[SIZE_SNAKE - 1].x == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y + 1 == food[FOOD_INDEX].y)	{   // neu xuong duoi la food		Eat();	}	for (int i = 0; i < SIZE_SNAKE - 1; i++)	{		snake[i].x = snake[i + 1].x;		snake[i].y = snake[i + 1].y;	}	snake[SIZE_SNAKE - 1].y++;}// di chuyen len trenvoid MoveUp(){	if (isTouchWall(snake[SIZE_SNAKE - 1].x, snake[SIZE_SNAKE - 1].y - 1))		ProcessDead(); // neu len tren la tuong	if (snake[SIZE_SNAKE - 1].x == food[FOOD_INDEX].x && snake[SIZE_SNAKE - 1].y - 1 == food[FOOD_INDEX].y)	{   // neu len tren la food		Eat();	}	for (int i = 0; i < SIZE_SNAKE - 1; i++)	{		snake[i].x = snake[i + 1].x;		snake[i].y = snake[i + 1].y;	}	snake[SIZE_SNAKE - 1].y--;}// ham su kienvoid ThreadFunc() {	while (1) {		if (STATE == 1) {//If my snake is alive			DrawSnakeAndFood(" ");			switch (MOVING) {			case 'A':				MoveLeft();				break;			case 'D':				MoveRight();				break;			case 'W':				MoveUp();				break;			case 'S':				MoveDown();				break;			}			DrawSnakeAndFood("O");			Sleep(100 / SPEED);		}	}}// menu bat dau void showStartMenu(){	system("cls");	cout << "Welcome to snake game!" << endl;	cout << "Options:" << endl;	cout << "1. Start" << endl;	cout << "2. Quit" << endl;	cout << "Your choice: ";	int option;	cin >> option;	if (option == 1)	{		system("cls");		cout << "Tip: Ban co the nhan bat ky de thoat trong luc choi ( tru nhung phim di chuyen)";		GotoXY(0, 3);		cout << "Ready!";		Sleep(1000);		for (int i = 3; i > 0; i--)		{			GotoXY(0, 3);			cout << i << "         ";			Sleep(1000);		}		GotoXY(0, 3);		cout << "GO!";		Sleep(1000);		StartGame();	}	else if (option == 2)		exit(1);}// main functionvoid main() {	int temp;	FixConsoleWindow();	StartGame();	thread t1(ThreadFunc); //Create thread for snake	HANDLE handle_t1 = t1.native_handle(); //Take handle of thread	while (1) {		temp = toupper(getch());		if (STATE == 1) {			if (temp == 'P') {				PauseGame(handle_t1);			}			else if (temp == 27) {				ExitGame(handle_t1);				return;			}			else {				ResumeThread(handle_t1);				if ((temp != CHAR_LOCK) && (temp == 'D' || temp == 'A' || temp ==					'W' || temp == 'S'))				{					if (temp == 'D') CHAR_LOCK = 'A'; // di sang phai thi buoc tiep theo ko the di sang trai					else if (temp == 'W') CHAR_LOCK = 'S';// di len tren thi khong the xuong duoi					else if (temp == 'S') CHAR_LOCK = 'W';// di xuong duoi thi ko the len tren					else CHAR_LOCK = 'D';// di sang trai thi ko the sang phai					MOVING = temp;				}			}		}		else {			if (temp == 'Y') StartGame(); // neu chon Y thi bat dau lai game			else { // neu bam nut ngoai Y thi exit game				ExitGame(handle_t1);				return;			}		}	}}